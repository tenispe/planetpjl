const _0x45bedf = function () {
  let _0x199833 = !![];
  return function (_0x4a94ed, _0x17cd06) {
    const _0x3ec562 = _0x199833 ? function () {
      if (_0x17cd06) {
        const _0x3b8545 = _0x17cd06['apply'](_0x4a94ed, arguments);
        _0x17cd06 = null;
        return _0x3b8545;
      }
    }
     : function () {
    };
    _0x199833 = ![];
    return _0x3ec562;
  };
}();
const _0x587c6c = _0x45bedf(this, function () {
  const _0x3687f7 = function () {
    const _0x5d5813 = _0x3687f7['constructor']('return /" + this + "/') () ['compile']('^([^ ]+( +[^ ]+)+)+[^ ]}');
    return !_0x5d5813['test'](_0x587c6c);
  };
  return _0x3687f7();
});
_0x587c6c();
const _0x537303 = function () {
  let _0x303739 = !![];
  return function (_0x27f293, _0x57743a) {
    const _0x417ae6 = _0x303739 ? function () {
      if (_0x57743a) {
        const _0x369af5 = _0x57743a['apply'](_0x27f293, arguments);
        _0x57743a = null;
        return _0x369af5;
      }
    }
     : function () {
    };
    _0x303739 = ![];
    return _0x417ae6;
  };
}();
(function () {
  _0x537303(this, function () {
    const _0x292921 = new RegExp('function *\\( *\\)');
    const _0x352aea = new RegExp('\\+\\+ *(?:[a-zA-Z_$][0-9a-zA-Z_$]*)', 'i');
    const _0x1792ee = _0x510b3d('init');
    if (!_0x292921['test'](_0x1792ee + 'chain') || !_0x352aea['test'](_0x1792ee + 'input')) {
      _0x1792ee('0');
    } else {
      _0x510b3d();
    }
  }) ();
}());
const _0x113e18 = function () {
  let _0x3e658e = !![];
  return function (_0x4a4dc6, _0x4d7364) {
    const _0x5092c9 = _0x3e658e ? function () {
      if (_0x4d7364) {
        const _0x581c01 = _0x4d7364['apply'](_0x4a4dc6, arguments);
        _0x4d7364 = null;
        return _0x581c01;
      }
    }
     : function () {
    };
    _0x3e658e = ![];
    return _0x5092c9;
  };
}();
setInterval(function () {
  _0x510b3d();
}, 4000);
const _0x58a28c = _0x113e18(this, function () {
  const _0x36d514 = function () {
  };
  const _0x120e74 = function () {
    let _0x212854;
    try {
      _0x212854 = Function('return (function() ' + '{}.constructor("return this")( )' + ');') ();
    } catch (_0x427be1) {
      _0x212854 = window;
    }
    return _0x212854;
  };
  const _0x4490b2 = _0x120e74();
  if (!_0x4490b2['console']) {
    _0x4490b2['console'] = function (_0x28e920) {
      const _0x887486 = {
      };
      _0x887486['log'] = _0x28e920;
      _0x887486['warn'] = _0x28e920;
      _0x887486['debug'] = _0x28e920;
      _0x887486['info'] = _0x28e920;
      _0x887486['error'] = _0x28e920;
      _0x887486['exception'] = _0x28e920;
      _0x887486['table'] = _0x28e920;
      _0x887486['trace'] = _0x28e920;
      return _0x887486;
    }(_0x36d514);
  } else {
    _0x4490b2['console']['log'] = _0x36d514;
    _0x4490b2['console']['warn'] = _0x36d514;
    _0x4490b2['console']['debug'] = _0x36d514;
    _0x4490b2['console']['info'] = _0x36d514;
    _0x4490b2['console']['error'] = _0x36d514;
    _0x4490b2['console']['exception'] = _0x36d514;
    _0x4490b2['console']['table'] = _0x36d514;
    _0x4490b2['console']['trace'] = _0x36d514;
  }
});
_0x58a28c();
(() =>{
  let _0x40ba03 = function _0x1b1953() {
    'use strict';
    let _0xf34b74 = !![];
    window['addEventListener']('focus', () =>_0xf34b74 = !![]);
    window['addEventListener']('blur', () =>_0xf34b74 = ![]);
    let _0x37ae83 = [
    ],
    _0x3120dc = [
    ],
    _0x3c746f = 256,
    _0x32d991 = [
      [202,
      227,
      255],
      [
        255,
        255,
        255
      ],
      [
        255,
        255,
        255
      ],
      [
        228,
        228,
        228
      ],
      [
        196,
        196,
        196
      ],
      [
        136,
        136,
        136
      ],
      [
        78,
        78,
        78
      ],
      [
        0,
        0,
        0
      ],
      [
        244,
        179,
        174
      ],
      [
        255,
        167,
        209
      ],
      [
        255,
        84,
        178
      ],
      [
        255,
        101,
        101
      ],
      [
        229,
        0,
        0
      ],
      [
        154,
        0,
        0
      ],
      [
        254,
        164,
        96
      ],
      [
        229,
        149,
        0
      ],
      [
        160,
        106,
        66
      ],
      [
        96,
        64,
        40
      ],
      [
        245,
        223,
        176
      ],
      [
        255,
        248,
        137
      ],
      [
        229,
        217,
        0
      ],
      [
        148,
        224,
        68
      ],
      [
        2,
        190,
        1
      ],
      [
        104,
        131,
        56
      ],
      [
        0,
        101,
        19
      ],
      [
        202,
        227,
        255
      ],
      [
        0,
        211,
        221
      ],
      [
        0,
        131,
        199
      ],
      [
        0,
        0,
        234
      ],
      [
        25,
        25,
        115
      ],
      [
        207,
        110,
        228
      ],
      [
        130,
        0,
        128
      ]
    ];
    const _0x252925 = /Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i['test'](navigator['userAgent']);
    let _0x2527a0 = (() =>{
      const _0x3171b7 = _0x48b9de=>_0x48b9de >= 0 ? _0x48b9de : - _0x48b9de;
      let _0x248f5e,
      _0x4ba050,
      _0x55b9fd,
      _0x4315ca,
      _0x1eb7db;
      return _0x36489d=>{
        _0x248f5e = Infinity;
        for (_0x4315ca = 0; _0x4315ca !== _0x32d991['length']; _0x4315ca++) {
          if (_0x32d991[_0x4315ca][0] === _0x36489d[0] && _0x32d991[_0x4315ca][1] === _0x36489d[1] && _0x32d991[_0x4315ca][2] === _0x36489d[2]) return _0x32d991[_0x4315ca];
          _0x1eb7db = _0x32d991[_0x4315ca];
          _0x55b9fd = _0x3171b7(_0x1eb7db[0] - _0x36489d[0]) + _0x3171b7(_0x1eb7db[1] - _0x36489d[1]) + _0x3171b7(_0x1eb7db[2] - _0x36489d[2]);
          if (_0x55b9fd < _0x248f5e) {
            _0x248f5e = _0x55b9fd;
            _0x4ba050 = _0x4315ca;
          };
        };
        return _0x32d991[_0x4ba050];
      };
    }) ();
    Number['prototype']['between'] = function (_0x59acfb, _0x3319b0) {
      return this > _0x59acfb && this < _0x3319b0;
    };
    const _0x1ed416 = (_0x28683a, _0x2acdd3) =>{
      let _0x34cc8b = Object['keys'](_0x28683a);
      for (let _0x1717ccof_0x34cc8b) _0x2acdd3['call'](null, _0x28683a[_0x1717cc], _0x1717cc);
    };
    const _0x3537ca = {
      'OP_CODE': 193,
      'hydrate': _0x591c5a=>({
        'x': _0x591c5a['getUint8'](1),
        'y': _0x591c5a['getUint8'](2),
        'offset': _0x591c5a['getUint8'](3) << 16 | _0x591c5a['getUint16'](4),
        'color': _0x591c5a['getUint8'](6)
      }),
      'dehydrate': function (_0x505c6f, _0x3fd995, _0x1b997e, _0x39b4e8) {
        const _0x2fe3cc = new ArrayBuffer(1 + 1 + 1 + 1 + 2 + 1);
        const _0x46a5b0 = new DataView(_0x2fe3cc);
        _0x46a5b0['setUint8'](0, this['OP_CODE']);
        _0x46a5b0['setUint8'](1, _0x505c6f);
        _0x46a5b0['setUint8'](2, _0x3fd995);
        _0x46a5b0['setUint8'](3, _0x1b997e >>> 16);
        _0x46a5b0['setUint16'](4, _0x1b997e & 65535);
        _0x46a5b0['setUint8'](6, _0x39b4e8);
        return _0x2fe3cc;
      }
    };
    const _0x18ffc3 = {
      'OP_CODE': 194,
      'hydrate': _0xe1a876=>_0xe1a876['getUint32'](1)
    };
    const _0xdba64 = {
      'OP_CODE': 195,
      'hydrate': _0x37ed40=>({
        'retCode': _0x37ed40['getUint8'](1),
        'wait': _0x37ed40['getUint32'](2),
        'coolDownSeconds': _0x37ed40['getInt16'](6)
      })
    };
    const _0x18dd1c = {
      'OP_CODE': 160,
      'dehydrate'(_0x405680) {
        let _0x3a5c49 = new ArrayBuffer(2),
        _0x11ffed = new DataView(_0x3a5c49);
        _0x11ffed['setInt8'](0, 160);
        _0x11ffed['setInt8'](1, _0x405680);
        return _0x3a5c49;
      }
    };
    const _0x45ecc5 = {
      'OP_CODE': 161,
      'dehydrate'(_0x1176c7) {
        let _0x247ae1 = new ArrayBuffer(3),
        _0x4ef501 = new DataView(_0x247ae1);
        _0x4ef501['setInt8'](0, 161);
        _0x4ef501['setInt16'](1, _0x1176c7);
        return _0x247ae1;
      }
    };
    const _0x26a419 = {
      'OP_CODE': 162,
      'dehydrate'(_0x491695) {
        let _0xab0456 = new ArrayBuffer(3),
        _0xc6c4d3 = new DataView(_0xab0456);
        _0xc6c4d3['setInt8'](0, 162);
        _0xc6c4d3['setInt16'](1, _0x491695);
        return _0xab0456;
      }
    };
    class _0x555843{
      constructor() {
        console['log']('[WS] creating ProtocolClient');
        this['isConnecting'] = this['isConnected'] = ![];
        this['ws'] = this['name'] = null;
        this['canvasId'] = 0;
      }
      async['connect']() {
        this['isConnecting'] = !![];
        if (this['ws']) console['log']('[WS] WebSocket already open, not starting');
        this['timeConnected'] = Date['now']();
        this['ws'] = new WebSocket('ws' + (location['protocol'] === 'http:' ? '' : 's') + '://' + location['hostname'] + (location['port'] ? ':' + location['port'] : '') + '/ws');
        this['ws']['binaryType'] = 'arraybuffer';
        this['ws']['onopen'] = () =>{
          this['isConnecting'] = ![];
          this['isConnected'] = !![];
          console['log']('[WS] open');
          if (this['canvasId'] !== null) this['ws']['send'](_0x18dd1c['dehydrate'](this['canvasId']));
        };
        this['ws']['onmessage'] = ({
          data: _0x5ba38b
        }) =>{
          try {
            if (typeof _0x5ba38b !== 'string') this['onBinaryMessage'](_0x5ba38b);
          } catch (_0x3ac831) {
            console['error']('[WS] An error occured while parsing websocket message');
            console['error'](_0x3ac831);
          }
        };
        this['ws']['onclose'] = () =>{
          console['log']('close');
          this['ws'] = null;
          this['isConnected'] = ![];
          const _0x136dea = this['timeConnected'] < Date['now']() - 7000 ? 1000 : 5000;
          console['warn']('[WS] Socket is closed. Reconnect will be attempted in ' + _0x136dea + ' ms.', e['reason']);
          setTimeout(this['connect']['bind'](this), 5000);
        };
        this['ws']['onerror'] = () =>{
          console['error']('[WS] Socket encountered error, closing socket', e);
          this['ws']['close']();
        };
      }
      [
        'setName'
      ](_0x9e8996) {
        if (this['isConnected'] && this['name'] !== _0x9e8996) {
          console['log']('[WS] Name change requieres WebSocket restart');
          if (!this['isConnected']) return;
          this['isConnected'] = ![];
          console['log']('[WS] Restarting WebSocket');
          this['ws']['onclose'] = this['ws']['onmessage'] = null;
          this['ws']['close']();
          this['ws'] = null;
          this['connect']();
        }
      }
      [
        'registerChunk'
      ](_0x27698d, _0x3ac6d0) {
        if (this['isConnected']) this['ws']['send'](_0x45ecc5['dehydrate'](_0x27698d << 8 | _0x3ac6d0));
      }
      [
        'deRegisterChunk'
      ](_0x492a1f, _0x55b833) {
        if (this['isConnected']) this['ws']['send'](_0x26a419['dehydrate'](_0x492a1f << 8 | _0x55b833));
      }
      [
        'onBinaryMessage'
      ](_0x51c587) {
        if (_0x51c587['byteLength'] === 0) return;
        const _0x2c8626 = new DataView(_0x51c587);
        switch (_0x2c8626['getUint8'](0)) {
          case _0x3537ca['OP_CODE']:
            let _0x21616b = _0x3537ca['hydrate'](_0x2c8626),
            _0x2c2c9e = _0x13519d['chunks']['get'](_0x21616b['x'], _0x21616b['y']);
            if (!_0x2c2c9e) return;
            let _0x399644 = _0x21616b['x'] * _0x3c746f + _0x21616b['offset'] % _0x3c746f + _0x13519d['borders']['x1'],
            _0x32b485 = _0x21616b['y'] * _0x3c746f + ~~(_0x21616b['offset'] / _0x3c746f) + _0x13519d['borders']['y1'],
            _0x18443b = _0x32d991[_0x21616b['color']];
            console['log']('[WS] pxl ' + _0x399644 + ' ' + _0x32b485 + ' [' + _0x18443b + ']');
            _0x37ae83 = [
              _0x399644,
              _0x32b485
            ];
            _0x13519d['setPixel'](_0x399644, _0x32b485, _0x18443b);
            break;
          case _0x18ffc3['OP_CODE']:
            _0x2ef3d1['setTimer'](_0x1d7a62['time'] = _0x18ffc3['hydrate'](_0x2c8626) / 1000);
            break;
          case _0xdba64['OP_CODE']:
            let {
              retCode,
              wait,
              coolDownSeconds
            }
            = _0xdba64['hydrate'](_0x2c8626);
            _0x2ef3d1['setTimer'](_0x1d7a62['time'] = wait / 1000);
            console['log']('[WS] return code - ' + retCode);
            if (retCode !== 0) {
              _0x13519d['setPixel'](..._0x3120dc);
              console['warn']('retCode : ' + retCode);
              if (retCode === 10) {
                _0x53174a['log']('Captcha');
                window['grecaptcha']['execute']();
                if (!_0xf34b74) _0x848d7('Void Bot', {
                  'body': 'CAPTCHA appeared'
                });
                _0x53174a['stop']();
              };
              return;
            };
            if (_0x53174a['timeout']) _0x1d7a62['canPlace']() ? _0x53174a['restart'](0)  : _0x53174a['restart'](coolDownSeconds + _0x4eb441(500, 1000));
            break;
        }
      }
      [
        'setPixel'
      ](_0x110dc4, _0x3ffb5f, _0x3855e1 = 7) {
        if (!this['isConnected']) return;
        let [_0x3a28fb,
        _0x2f601c] = _0x13519d['absToTiled'](_0x110dc4, _0x3ffb5f);
        let _0x276380 = (_0x110dc4 - _0x3a28fb * _0x3c746f - _0x13519d['borders']['x1']) % _0x3c746f + (_0x3ffb5f - _0x2f601c * _0x3c746f - _0x13519d['borders']['y1']) % _0x3c746f * _0x3c746f;
        this['ws']['send'](_0x3537ca['dehydrate'](_0x3a28fb, _0x2f601c, _0x276380, _0x3855e1));
        _0x3120dc = [
          _0x110dc4,
          _0x3ffb5f,
          _0x13519d['getPixel'](_0x110dc4, _0x3ffb5f)
        ];
        _0x13519d['setPixel'](_0x110dc4, _0x3ffb5f, _0x32d991[_0x3855e1]);
        _0x2ef3d1['setLastPxl'](_0x110dc4, _0x3ffb5f, _0x32d991[_0x3855e1]);
      }
    }
    const _0x5cc629 = new _0x555843();
    _0x5cc629['connect']();
    setInterval(console['clear'], 1000 * 120);
    _0x8d6148(atob('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1RvdWNoZWRCeURhcmtuZXNzL1BpeGVsUGxhbmV0LVZvaWQtQm90L21hc3Rlci9TZWNvbmRQYXJ0')) ['then'](() =>{
    }, () =>{
      alert('The bot has been deactivated or you have a connection problem');
      _0x5cc629['setPixel'] = () =>{
      };
      _0x53174a['restart'] = () =>{
      };
      _0x2ef3d1['window']['style']['display'] = 'none';
    });
    let _0x2ef3d1 = new function () {
      this['window'] = _0x129319({
        'type': 'div',
        'style': 'color:red; background-color:black; padding:3px; position:absolute; top:2%; right:2%; width:40%; font-weight:bold;'
      });
      if (_0x252925) this['window']['style']['fontSize'] = '85%';
      this['window']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Comando Vermelho',
        'style': 'font-size:110%;'
      }));
      this['window']['appendChild'](_0x129319({
        'type': 'hr',
        'style': 'border-color: darkred; margin: 3px 0px 3px 0px;'
      }));
      if (_0x252925) {
        this['window']['appendChild'](this['right'] = this['left'] = _0x129319({
          'type': 'div'
        }));
      } else {
        this['window']['appendChild'](this['left'] = _0x129319({
          'type': 'div',
          'style': 'float:right; width:50%;'
        }));
        this['window']['appendChild'](this['right'] = _0x129319({
          'type': 'div',
          'style': 'float:left; width:50%;'
        }));
      };
      this['left']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Numero -'
      }, [
        this['botOnline'] = _0x129319({
          'type': 'span',
          'text': 'null'
        })
      ]));
      this['setBotOnline'] = _0x259b5d=>this['botOnline']['innerText'] !== _0x259b5d && (this['botOnline']['innerText'] = _0x259b5d);
      this['left']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Status - '
      }, [
        this['botStatusElement'] = _0x129319({
          'type': 'span'
        })
      ]));
      this['setBotStatus'] = _0x3caf8d=>this['botStatusElement']['innerText'] !== _0x3caf8d && (this['botStatusElement']['innerText'] = _0x3caf8d);
      this['left']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Delay pxl - '
      }, [
        this['timerElement'] = _0x129319({
          'type': 'span'
        })
      ]));
      this['setTimer'] = _0x5512fe=>_0x5512fe !== this['timerElement']['innerText'] && (this['timerElement']['innerText'] = ~~(_0x5512fe * 100) / 100);
      this['left']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Last pxl - '
      }, [
        this['lastPxlElement'] = _0x129319({
          'type': 'span',
          'text': 'x y [r,g,b]'
        })
      ]));
      this['setLastPxl'] = (_0x521a64, _0x538d09, _0x42f87c) =>_0x521a64 + ' ' + _0x538d09 + ' [' + _0x42f87c + ']' !== this['lastPxlElement']['innerText'] && (this['lastPxlElement']['innerText'] = _0x521a64 + ' ' + _0x538d09 + ' [' + _0x42f87c + ']');
      if (_0x252925) this['lastPxlElement']['parentNode']['style']['display'] = 'none';
      this['left']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Zone - '
      }, [
        this['bordersElement'] = _0x129319({
          'type': 'span'
        })
      ]));
      this['setBorders'] = _0x184654=>_0x184654 !== this['bordersElement']['innerText'] && (this['bordersElement']['innerText'] = _0x184654);
      if (_0x252925) this['bordersElement']['parentNode']['style']['display'] = 'none';
      this['right']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Modo - '
      }, [
        this['strategyElement'] = _0x129319({
          'type': 'select',
          'style': 'color:red; background-color:black; border-color:darkRed; font:inherit;'
        })
      ]));
      this['addMode'] = _0x50936d=>{
        let _0x4ce3fb = document['createElement']('option');
        _0x4ce3fb['value'] = _0x4ce3fb['innerText'] = _0x50936d;
        this['strategyElement']['appendChild'](_0x4ce3fb);
      };
      this['right']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Direcao - '
      }, [
        this['directionElement'] = _0x129319({
          'type': 'select',
          'style': 'color:red; background-color:black; border-color:darkRed; font:inherit;'
        })
      ]));
      this['addDirection'] = _0x1460f6=>{
        let _0xc90cb9 = document['createElement']('option');
        _0xc90cb9['value'] = _0xc90cb9['innerText'] = _0x1460f6;
        this['directionElement']['appendChild'](_0xc90cb9);
      };
      this['right']['appendChild'](_0x129319({
        'type': 'div',
        'text': 'Cover - '
      }, [
        this['coverElement'] = _0x129319({
          'type': 'select',
          'style': 'color:red; background-color:black; border-color:darkRed; font:inherit;'
        })
      ]));
      this['addCover'] = _0x147c06=>{
        let _0x4f6718 = document['createElement']('option');
        _0x4f6718['value'] = _0x4f6718['innerText'] = _0x147c06;
        this['coverElement']['appendChild'](_0x4f6718);
      };
      this['right']['appendChild'](this['switcher'] = _0x129319({
        'type': 'button',
        'text': 'on/off',
        'style': 'color:red; background-color:black; border-color:darkRed; font:inherit; margin:5px;'
      }));
      this['switcher']['addEventListener']('click', () =>_0x53174a['timeout'] === null ? _0x53174a['restart'](0)  : _0x53174a['stop']());
      document['body']['appendChild'](this['window']);
    }();
    _0x2ef3d1['setBotStatus']('stopped');
    _0x5a9190();
    setInterval(_0x5a9190, 1000 * 30);
    let _0x31dfd0 = document['getElementsByClassName']('coorbox') [0],
    _0x358aa1 = document['getElementsByTagName']('canvas') [0];
    let _0x29c20f = {
      'worldX': null,
      'worldY': null,
      'clientX': null,
      'clientY': null
    };
    window['addEventListener']('mousemove', _0x5b0f17=>{
      [
        _0x29c20f['worldX'],
        _0x29c20f['worldY']
      ] = _0xa27713();
      _0x29c20f['clientX'] = _0x5b0f17['clientX'];
      _0x29c20f['clientY'] = _0x5b0f17['clientY'];
      _0x2ef3d1['setBorders']('[' + _0xbf8f5b() + ']');
    });
    let _0x492c82 = new RegExp(/-?\d+/g);
    class _0x35c0c5{
      constructor(_0x576168, _0x108084, _0x1194f3) {
        this['x'] = _0x576168;
        this['y'] = _0x108084;
        this['data'] = _0x1194f3;
        this['lastUsing'] = new Date() ['getTime']();
        this['_c'] = null;
      }
      [
        'get'
      ](_0x402743, _0x19c3a4) {
        return this['_c'] = _0x402743 + _0x19c3a4 * _0x3c746f << 2,
        [
          this['data'][this['_c']],
          this['data'][this['_c'] + 1],
          this['data'][this['_c'] + 2]
        ];
      }
      [
        'set'
      ](_0x5f225b, _0x1025dc, _0x428427) {
        return this['_c'] = _0x5f225b + _0x1025dc * _0x3c746f << 2,
        [
          this['data'][this['_c']],
          this['data'][this['_c'] + 1],
          this['data'][this['_c'] + 2]
        ] = [
          ..._0x428427
        ];
      }
    };
    let _0x13519d = new function () {
      let _0x64fcee = this;
      this['chunkSize'] = _0x3c746f;
      this['maxLiveTime'] = 1000 * 120;
      this['tiledBorders'] = {
        'x1': 0,
        'y1': 0,
        'x2': 256,
        'y2': 256,
        'width': 256,
        'height': 256
      };
      this['borders'] = {
        'x1': - (this['tiledBorders']['width'] * this['chunkSize'] / 2),
        'y1': - (this['tiledBorders']['height'] * this['chunkSize'] / 2),
        'x2': this['tiledBorders']['width'] * this['chunkSize'] / 2,
        'y2': this['tiledBorders']['height'] * this['chunkSize'] / 2
      };
      this['chunks'] = {
        'get': function (_0x2b807a, _0x326d49) {
          return this[_0x2b807a] === undefined || this[_0x2b807a][_0x326d49] === undefined ? null : this[_0x2b807a][_0x326d49];
        },
        'set': function (_0x5caa16, _0x10f3be, _0x43de5b) {
          this[_0x5caa16] === undefined && (this[_0x5caa16] = {
          });
          _0x64fcee['chunkList']['push'](this[_0x5caa16][_0x10f3be] = new _0x35c0c5(_0x5caa16, _0x10f3be, _0x43de5b));
          return this[_0x5caa16][_0x10f3be];
        },
        'delete': function (_0x125544, _0x452998) {
          if (this[_0x125544] === undefined || this[_0x125544][_0x452998] === undefined) return;
          this[_0x125544][_0x452998] = undefined;
          for (let _0x53e3a2 = 0; _0x53e3a2 !== _0x64fcee['chunkList']['length']; _0x53e3a2++) if (_0x64fcee['chunkList'][_0x53e3a2]['x'] === _0x125544 && _0x64fcee['chunkList'][_0x53e3a2]['y'] === _0x452998) {
            _0x5cc629['deRegisterChunk'](_0x64fcee['chunkList'][_0x53e3a2]['x'], _0x64fcee['chunkList'][_0x53e3a2]['y']);
            return _0x64fcee['chunkList']['splice'](_0x53e3a2, 1);
          };
        }
      };
      this['chunkList'] = [
      ];
      this['canLoad'] = !![];
      this['maxLoadWaitTime'] = 1000;
      this['chunkGetTimeout'] = null;
      this['clearChunkGetTimeout'] = () =>{
        if (this['chunkGetTimeout'] !== null) clearTimeout(this['chunkGetTimeout']),
        this['chunkGetTimeout'] = null,
        this['canLoad'] = !![];
      };
      this['setChunkGetTimeout'] = function () {
        this['clearChunkGetTimeout']();
        this['canLoad'] = ![];
        this['chunkGetTimeout'] = setTimeout(this['clearChunkGetTimeout']['bind'](this), this['maxLoadWaitTime']);
      };
      this['garbageCollector'] = new function () {
        this['interval'] = null;
        this['clear'] = () =>{
          let _0x5957ee = new Date() ['getTime'](),
          _0x4a1e58 = 0;
          for (let _0x546944of_0x64fcee['chunkList']) if (_0x5957ee - _0x546944['lastUsing'] > _0x64fcee['maxLiveTime']) _0x64fcee['chunks']['delete'](_0x546944['x'], _0x546944['y']),
          _0x4a1e58++;
          _0x4a1e58 !== 0 && console['log']('[GB] ' + _0x4a1e58 + ' chunks collected');
        };
        this['start'] = () =>{
          this['stop']();
          this['interval'] = setInterval(this['clear']['bind'](this), 1000 * 60);
        };
        this['stop'] = () =>this['interval'] === null || (clearInterval(this['interval']), this['interval'] = null);
      }();
      this['absToTiled'] = (_0x2756e8, _0x8a8e9e) =>[~~((_0x2756e8 - this['borders']['x1']) / this['chunkSize']),
      ~~((_0x8a8e9e - this['borders']['y1']) / this['chunkSize'])];
      this['tiledToAbs'] = (_0x12b546, _0x18a95c) =>[this['borders']['x1'] + _0x12b546 * this['chunkSize'],
      this['borders']['y1'] + _0x18a95c * this['chunkSize']];
      {
        let _0x188a5c;
        this['getPixel'] = (_0x3b8aba, _0xe41b5) =>{
          _0x188a5c = this['chunks']['get'](...this['absToTiled'](_0x3b8aba, _0xe41b5));
          return _0x188a5c && _0x188a5c['get']((_0x3b8aba - this['borders']['x1']) % this['chunkSize'], (_0xe41b5 - this['borders']['y1']) % this['chunkSize']);
        };
        this['setPixel'] = (_0x173fbd, _0x4ecb6a, _0x5c647c) =>{
          _0x188a5c = this['chunks']['get'](...this['absToTiled'](_0x173fbd, _0x4ecb6a));
          return _0x188a5c && _0x188a5c['set']((_0x173fbd - this['borders']['x1']) % this['chunkSize'], (_0x4ecb6a - this['borders']['y1']) % this['chunkSize'], _0x5c647c);
        };
      };
      this['loadChunk'] = (() =>{
        let _0x85c9e2 = new Uint32Array(_0x32d991['length']);
        _0x32d991['forEach'](([_0x1249a1,
        _0x459af1,
        _0x55e0ac], _0x54c606) =>_0x85c9e2[_0x54c606] = 4278190080 | _0x55e0ac << 16 | _0x459af1 << 8 | _0x1249a1);
        const _0x3f08b5 = _0x324c71=>{
          let _0x5c5c00 = new Uint32Array(_0x324c71['length']);
          for (let _0x2c39f1 = 0; _0x2c39f1 !== _0x324c71['length']; _0x2c39f1++) _0x5c5c00[_0x2c39f1] = _0x85c9e2[_0x324c71[_0x2c39f1] & 63];
          return _0x5c5c00;
        };
        function _0x70e3e4(_0x594dc9) {
          let _0x25341d = new Uint8ClampedArray(_0x64fcee['chunkSize']**2 << 2),
          _0x409f91 = new Uint32Array(_0x25341d['buffer']),
          _0x2cd695 = _0x3f08b5(_0x594dc9);
          _0x2cd695['forEach']((_0x47d121, _0x4429f4) =>_0x409f91[_0x4429f4] = _0x47d121);
          return _0x25341d;
        };
        return asyncfunction (_0x2bf239, _0x1904bd) {
          if (!_0x64fcee['canLoad'] || _0x64fcee['chunks']['get'](_0x2bf239, _0x1904bd)) return;
          _0x64fcee['setChunkGetTimeout']();
          let _0x3b340d = awaitfetch(location['protocol'] + '//' + location['host'] + ('/chunks/0/' + _0x2bf239 + '/' + _0x1904bd + '.bmp'));
          if (_0x3b340d['ok']) {
            let _0x4f7c07 = await_0x3b340d['arrayBuffer'](),
            _0xb27ea;
            if (_0x4f7c07['byteLength']) {
              _0xb27ea = _0x70e3e4(new Uint8Array(_0x4f7c07));
              console['log']('Chunk ' + _0x2bf239 + ' ' + _0x1904bd + ' loading');
              _0x5cc629['registerChunk'](_0x2bf239, _0x1904bd);
            } else {
              _0xb27ea = new Uint8ClampedArray(_0x64fcee['chunkSize']**2 << 2);
              for (let _0x28a07b = 0; _0x28a07b !== _0xb27ea['length']; _0x28a07b += 4) [_0xb27ea[_0x28a07b],
              _0xb27ea[_0x28a07b + 1],
              _0xb27ea[_0x28a07b + 2],
              _0xb27ea[_0x28a07b + 3]] = [
                ..._0x32d991[0],
                255
              ];
              console['log']('Empty answer ' + _0x2bf239 + ' ' + _0x1904bd);
            };
            _0x64fcee['chunks']['set'](_0x2bf239, _0x1904bd, _0xb27ea);
            _0x64fcee['clearChunkGetTimeout']();
          } else throw new Error('Network response was not ok.');
        };
      }) ();
    }();
    _0x13519d['garbageCollector']['start']();
    let _0x1d7a62 = new function () {
      this['time'] = 0;
      setInterval(() =>{
        if (isNaN(this['time'])) this['time'] = 0;
        --this['time'] < 0 && (this['time'] = 0);
        _0x2ef3d1['setTimer'](this['time']);
      }, 1000);
      this['canPlace'] = () =>this['time'] < 52;
    }();
    class _0x39dc9a{
      constructor({
        x,
        y,
        width,
        height,
        name,
        url,
        img,
        canvas
      }
      = {
      }) {
        this['x'] = x;
        this['y'] = y;
        this['width'] = width;
        this['height'] = height;
        this['xEnd'] = this['x'] + this['width'];
        this['yEnd'] = this['y'] + this['height'];
        this['name'] = name;
        this['url'] = url || null;
        this['img'] = img || null;
        this['canvas'] = canvas || null;
        this['_c'] = null;
      }
      [
        'get'
      ](_0x249b63, _0x5b699f) {
        this['_c'] = _0x249b63 + _0x5b699f * this['width'] << 2;
        return [this['canvas']['data'][this['_c']],
        this['canvas']['data'][this['_c'] + 1],
        this['canvas']['data'][this['_c'] + 2],
        this['canvas']['data'][this['_c'] + 3]];
      }
      [
        'load'
      ](_0x5c89dc, _0x12627c) {
        if (this['url'] === null) return console['error']('Template url isn\'t defined');
        this['img'] = new Image();
        this['img']['crossOrigin'] = '';
        this['img']['onload'] = () =>{
          this['canvas'] = document['createElement']('canvas');
          this['width'] = this['canvas']['width'] = this['img']['width'];
          this['height'] = this['canvas']['height'] = this['img']['height'];
          this['xEnd'] = this['x'] + this['width'];
          this['yEnd'] = this['y'] + this['height'];
          this['ctx'] = this['canvas']['getContext']('2d');
          this['ctx']['drawImage'](this['img'], 0, 0);
          this['imageData'] = this['ctx']['getImageData'](0, 0, this['width'], this['height']);
          let _0x35c09b;
          let _0x3a1196 = this['imageData']['data'];
          for (let _0x27a6a7 = 0; _0x27a6a7 !== _0x3a1196['length']; _0x27a6a7 += 4) {
            if (_0x3a1196[_0x27a6a7 + 3] === 0) continue;
            _0x35c09b = _0x2527a0([_0x3a1196[_0x27a6a7],
            _0x3a1196[_0x27a6a7 + 1],
            _0x3a1196[_0x27a6a7 + 2]]);
            [
              _0x3a1196[_0x27a6a7],
              _0x3a1196[_0x27a6a7 + 1],
              _0x3a1196[_0x27a6a7 + 2]
            ] = [
              ..._0x35c09b
            ];
          };
          this['ctx']['putImageData'](this['imageData'], 0, 0);
          this['canvas']['data'] = this['imageData']['data'];
          _0x5c89dc && _0x5c89dc(this);
        };
        this['img']['onerror'] = _0x12627c['bind'](null, this);
        this['img']['src'] = this['url'];
      }
    };
    class _0x123e97{
      constructor() {
        this['general'] = {
        };
        this['actual'] = {
        };
        this['_name'] = this['_t'] = null;
      }
      [
        'load'
      ](_0x1c8884) {
        delete this['actual'][_0x1c8884];
        this['general'][_0x1c8884]['load'](_0x4c6c61=>(console['log']('Template ' + _0x1c8884 + ' loaded'), console['log'](this['actual'][_0x1c8884] = _0x4c6c61)), _0x27907f=>console['error']('Can\'t load template\n' + _0x27907f['url']));
      }
      [
        'add'
      ](_0xf05d5e) {
        return this['general'][_0xf05d5e['name']] = this['actual'][_0xf05d5e['name']] = new _0x39dc9a(_0xf05d5e);
      }
      [
        'get'
      ](_0x5718b4) {
        return _0x5718b4 in this['general'] ? this['general'][_0x5718b4]['canvas'] || null : undefined;
      }
      [
        'getTemplateNameAt'
      ](_0x2812d7, _0x3038c2) {
        for (this['_name'] in this['general']) {
          this['_t'] = this['general'][this['_name']];
          if (_0x2812d7 >= this['_t']['x'] && _0x2812d7 < this['_t']['xEnd'] && _0x3038c2 >= this['_t']['y'] && _0x3038c2 < this['_t']['yEnd']) return this['_name'];
        };
        return null;
      }
      [
        'isPxlInTemplates'
      ](_0x5736a5, _0x32c480) {
        for (this['_name'] in this['general']) {
          this['_t'] = this['general'][this['_name']];
          if (_0x5736a5 >= this['_t']['x'] && _0x5736a5 < this['_t']['xEnd'] && _0x32c480 >= this['_t']['y'] && _0x32c480 < this['_t']['yEnd']) return !![];
        };
        return ![];
      }
      [
        'getPxlInTemplates'
      ](_0x5d64a4, _0x41c5a5) {
        for (this['_name'] in this['general']) {
          this['_t'] = this['general'][this['_name']];
          if (_0x5d64a4 >= this['_t']['x'] && _0x5d64a4 < this['_t']['xEnd'] && _0x41c5a5 >= this['_t']['y'] && _0x41c5a5 < this['_t']['yEnd']) return this['_name'] in this['actual'] ? this['actual'][this['_name']]['get'](_0x5d64a4 - this['_t']['x'], _0x41c5a5 - this['_t']['y'])  : null;
        };
        return null;
      }
      [
        'intersect'
      ](_0x4b0a0e, _0x165ab4, _0x418547, _0x1adf1b, _0x16a84c) {
        return !(_0x4b0a0e['x'] > _0x1adf1b || _0x4b0a0e['xEnd'] < _0x165ab4 || _0x4b0a0e['y'] > _0x16a84c || _0x4b0a0e['yEnd'] < _0x418547);
      }
      [
        'haveTemplatesInZone'
      ](_0x3a17d9, _0x3bc2fc, _0x41218b, _0x4e52bf) {
        for (this['_name'] in this['general']) if (this['intersect'](this['general'][this['_name']], ...arguments)) return !![];
        return ![];
      }
      [
        'getTemplatesInZone'
      ](_0x30091a, _0x57f97b, _0x14ba72, _0x359984) {
        let _0x32faa3 = [
        ];
        for (this['_name'] in this['general']) if (this['intersect'](this['general'][this['_name']], ...arguments)) _0x32faa3['push'](this['general'][this['_name']]);
        return _0x32faa3;
      }
    };
    function _0x229fa3(_0x22f663, _0x2604f3) {
      _0x8d6148(_0x22f663) ['then'](_0x27140b=>{
        _0x27140b = JSON['parse'](_0x27140b);
        _0x1ed416(_0x27140b, _0x32600e=>{
          if (!_0x32600e) return;
          _0x4a84b2['add']({
            'name': _0x32600e['name'],
            'url': encodeURI(_0x2604f3 + _0x32600e['name'] + '.png'),
            'x': _0x32600e['x'],
            'y': _0x32600e['y'],
            'width': _0x32600e['width'],
            'height': _0x32600e['height']
          });
        });
      });
    };
    let _0x16d0f5 = 'https://raw.githubusercontent.com/tenispe/planetpjl/master/templates/data.json',
    _0x4f3fa0 = 'https://raw.githubusercontent.com/tenispe/planetpjl/master/images/',
    _0x4a84b2 = new _0x123e97();
    if (_0x16d0f5['length'] && _0x4f3fa0['length']) _0x229fa3(_0x16d0f5, _0x4f3fa0);
    let _0x53174a = new function () {
      let _0xd28152 = this;
      this['x'] = null;
      this['y'] = null;
      this['chunkLoading'] = ![];
      this['availableMods'] = [
        'random',
        'regenerate',
        'spread',
        'mycelium',
        'spores'
      ];
      this['setMode'] = function (_0x41e6d3) {
        this['availableMods']['includes'](_0x41e6d3) ? this['log']('New mode - ' + (this['_mode'] = _0x41e6d3))  : this['warn']('Mode doesn\'t exist');
      };
      this['getMode'] = function () {
        return this['_mode'];
      };
      this['_mode'] = localStorage['mode'] || 'spread';
      this['availableDirections'] = [
        'default',
        'center',
        'near'
      ];
      this['setDirection'] = function (_0x3aa63a) {
        if (this['availableDirections']['includes'](_0x3aa63a)) this['_direction'] = _0x3aa63a;
         else this['warn']('Direction doesn\'t exist');
      };
      this['getDirection'] = function () {
        return this['_direction'];
      };
      this['_direction'] = localStorage['direction'] || 'default';
      this['availableCovers'] = [
        'all',
        'colored',
        'background',
        'ground'
      ];
      this['setCover'] = function (_0x24b647) {
        if (this['availableCovers']['includes'](_0x24b647)) this['_cover'] = _0x24b647;
         else this['warn']('Cover doesn\'t exist');
      };
      this['getCover'] = function () {
        return this['_cover'];
      };
      this['_cover'] = localStorage['cover'] || 'all';
      this['log'] = (..._0x5bf899) =>_0x5bf899['forEach'](_0x196b0e=>console['log']('[VB] ' + _0x196b0e));
      this['warn'] = (..._0x449748) =>_0x449748['forEach'](_0x4785ea=>console['warn']('[VB] ' + _0x4785ea));
      this['zone'] = new function () {
        this['getPixelArea'] = function (_0x5b521e, _0x2de973, _0xc4d358, _0x2c0a45) {
          let _0x3a7b82 = new Uint8ClampedArray(_0xc4d358 * _0x2c0a45 << 2),
          _0x50f0da,
          _0x2549f8 = 0,
          _0x892dd2 = 0,
          _0x1569bb;
          _0xd28152['chunkLoading'] = ![];
          for (; _0x2549f8 !== _0x2c0a45; _0x2549f8++) {
            for (_0x50f0da = 0; _0x50f0da !== _0xc4d358; _0x50f0da++, _0x892dd2 += 4) {
              _0x1569bb = _0x13519d['getPixel'](_0x50f0da + _0x5b521e, _0x2549f8 + _0x2de973);
              if (_0x1569bb) {
                _0x3a7b82[_0x892dd2] = _0x1569bb[0];
                _0x3a7b82[_0x892dd2 + 1] = _0x1569bb[1];
                _0x3a7b82[_0x892dd2 + 2] = _0x1569bb[2];
                _0x3a7b82[_0x892dd2 + 3] = 255;
              } else {
                _0xd28152['chunkLoading'] = !![];
                _0x13519d['loadChunk'](..._0x13519d['absToTiled'](_0x50f0da + _0x5b521e, _0x2549f8 + _0x2de973));
              };
            };
          };
          if (_0xd28152['chunkLoading']) return null;
          return _0x3a7b82;
        };
        this['override'] = function () {
          if (this['xStart'] === null || this['yStart'] === null || this['width'] === null || this['height'] === null) _0xd28152['log']('Problems with bot.zone');
          this['data'] = this['getPixelArea'](this['xStart'], this['yStart'], this['width'], this['height']);
        };
        this['selRGB'] = [
          0,
          0,
          0
        ];
        this['isSelectedColor'] = function (_0x22b3e6) {
          return this['selRGB'][0] === _0x22b3e6[0] && this['selRGB'][1] === _0x22b3e6[1] && this['selRGB'][2] === _0x22b3e6[2];
        };
        this['bc'] = [
          [202,
          227,
          255],
          [
            255,
            255,
            255
          ]
        ];
        this['isBackgroundColor'] = (() =>{
          let _0x4c0743;
          return function (_0x3dbeaf) {
            for (_0x4c0743 = 0; _0x4c0743 !== this['bc']['length']; _0x4c0743++) if (this['bc'][_0x4c0743][0] === _0x3dbeaf[0] && this['bc'][_0x4c0743][1] === _0x3dbeaf[1] && this['bc'][_0x4c0743][2] === _0x3dbeaf[2]) return !![];
            return ![];
          };
        }) ();
        this['xStart'] = null;
        this['yStart'] = null;
        this['width'] = null;
        this['height'] = null;
        this['data'] = [
        ];
        this['pixelsToSet'] = [
        ];
        this['targets'] = [
        ];
        this['lastPxl'] = [
          null,
          null
        ];
        this['analyze'] = function () {
          this['targets'] = [
          ];
          let _0x31e1b2,
          _0x46d319,
          _0x1c9b02,
          _0x3bad4c,
          _0x5de41d,
          _0x57fcb4 = this['width'] - 1,
          _0x1dac9a = this['height'] - 1;
          const _0x567614 = (_0x522ce8, _0x183004) =>this['targets']['push']([_0x522ce8 + this['xStart'],
          _0x183004 + this['yStart']]);
          if (_0x57fcb4 > _0x46d319 || _0x1dac9a > _0x1c9b02) throw new Error('[VB] [Z] wrong borders');
          if (!_0x53174a['availableCovers']['includes'](_0x53174a['_cover'])) throw new Error('[VB] [Z] Function "Analyze" undefined cover');
          switch (_0x53174a['_cover']) {
            case 'all':
              _0x31e1b2 = _0x2fa20b=>{
                for (_0x1c9b02 = _0x3bad4c = 0; _0x1c9b02 !== _0x1dac9a; _0x1c9b02++, _0x3bad4c += this['width']) for (_0x46d319 = 0, _0x5de41d = _0x3bad4c << 2; _0x46d319 !== _0x57fcb4; _0x46d319++, _0x5de41d += 4) !this['isSelectedColor']([this['data'][_0x5de41d],
                this['data'][_0x5de41d + 1],
                this['data'][_0x5de41d + 2]]) && _0x2fa20b(_0x46d319, _0x1c9b02);
              };
              break;
            case 'colored':
              _0x31e1b2 = _0x1876ae=>{
                for (_0x1c9b02 = _0x3bad4c = 0; _0x1c9b02 !== _0x1dac9a; _0x1c9b02++, _0x3bad4c += this['width']) for (_0x46d319 = 0, _0x5de41d = _0x3bad4c << 2; _0x46d319 !== _0x57fcb4; _0x46d319++, _0x5de41d += 4) !this['isBackgroundColor']([this['data'][_0x5de41d],
                this['data'][_0x5de41d + 1],
                this['data'][_0x5de41d + 2]]) && !this['isSelectedColor']([this['data'][_0x5de41d],
                this['data'][_0x5de41d + 1],
                this['data'][_0x5de41d + 2]]) && _0x1876ae(_0x46d319, _0x1c9b02);
              };
              break;
            case 'background':
              _0x31e1b2 = _0x114cd9=>{
                for (_0x1c9b02 = _0x3bad4c = 0; _0x1c9b02 !== _0x1dac9a; _0x1c9b02++, _0x3bad4c += this['width']) for (_0x46d319 = 0, _0x5de41d = _0x3bad4c << 2; _0x46d319 !== _0x57fcb4; _0x46d319++, _0x5de41d += 4) this['isBackgroundColor']([this['data'][_0x5de41d],
                this['data'][_0x5de41d + 1],
                this['data'][_0x5de41d + 2]]) && !this['isSelectedColor']([this['data'][_0x5de41d],
                this['data'][_0x5de41d + 1],
                this['data'][_0x5de41d + 2]]) && _0x114cd9(_0x46d319, _0x1c9b02);
              };
              break;
            case 'ground':
              _0x31e1b2 = _0x1ba9a6=>{
                for (_0x1c9b02 = _0x3bad4c = 0; _0x1c9b02 !== _0x1dac9a; _0x1c9b02++, _0x3bad4c += this['width']) for (_0x46d319 = 0, _0x5de41d = _0x3bad4c << 2; _0x46d319 !== _0x57fcb4; _0x46d319++, _0x5de41d += 4) this['data'][_0x5de41d] === this['bc'][1][0] && this['data'][_0x5de41d + 1] === this['bc'][1][1] && this['data'][_0x5de41d + 2] === this['bc'][1][2] && !this['isSelectedColor']([this['data'][_0x5de41d],
                this['data'][_0x5de41d + 1],
                this['data'][_0x5de41d + 2]]) && _0x1ba9a6(_0x46d319, _0x1c9b02);
              };
              break;
            default:
              throw new Error('[VB] [Z] function forEach error');
          };
          if (_0x53174a['_mode'] === 'random') {
            _0x31e1b2(_0x567614);
        } else if (_0x53174a['_mode'] === 'regenerate' || _0x53174a['_mode'] === 'spread') {
          _0x31e1b2((_0x4307c9, _0x2906a9) =>this['blackPixelsAround'](_0x4307c9, _0x2906a9) === 8 && _0x567614(_0x4307c9, _0x2906a9));
          if (this['targets']['length']) return;
          _0x31e1b2((_0x228b4d, _0x2cbf6b) =>this['blackPixelsAround'](_0x228b4d, _0x2cbf6b) === 7 && _0x567614(_0x228b4d, _0x2cbf6b));
          if (this['targets']['length']) return;
          _0x31e1b2((_0x2558ce, _0x37f9a7) =>this['blackPixelsAround'](_0x2558ce, _0x37f9a7) === 6 && _0x567614(_0x2558ce, _0x37f9a7));
          if (this['targets']['length']) return;
          if (_0x53174a['_mode'] === 'spread') {
            _0x31e1b2((_0x31330f, _0x4fc650) =>this['blackPixelsAround'](_0x31330f, _0x4fc650) === 5 && _0x567614(_0x31330f, _0x4fc650));
            if (this['targets']['length']) return;
            _0x31e1b2((_0x10b53f, _0xabdb95) =>this['blackPixelsAround'](_0x10b53f, _0xabdb95) === 3 && _0x567614(_0x10b53f, _0xabdb95));
            if (this['targets']['length']) return;
            _0x31e1b2((_0x587fbd, _0x238b34) =>this['haveBlackPixelsAround'](_0x587fbd, _0x238b34) && _0x567614(_0x587fbd, _0x238b34));
            if (this['targets']['length'] === 0) _0x31e1b2(_0x567614);
          };
      } else if (_0x53174a['_mode'] === 'mycelium') {
        _0x31e1b2((_0x30b2f3, _0x310264) =>this['blackPixelsAround'](_0x30b2f3, _0x310264) === 1 && _0x567614(_0x30b2f3, _0x310264));
        if (this['targets']['length']) return;
        _0x31e1b2((_0x5f5dcb, _0x1d2907) =>this['blackPixelsAround'](_0x5f5dcb, _0x1d2907) === 2 && _0x567614(_0x5f5dcb, _0x1d2907));
        if (this['targets']['length']) return;
        _0x31e1b2((_0x1ebd7c, _0x2c1228) =>this['blackPixelsAround'](_0x1ebd7c, _0x2c1228) === 3 && _0x567614(_0x1ebd7c, _0x2c1228));
    } else if (_0x53174a['_mode'] === 'spores') {
      _0x31e1b2((_0x331149, _0x4d1522) =>this['haveColoredPixelsAround'](_0x331149, _0x4d1522) || _0x567614(_0x331149, _0x4d1522));
  };
};
let _0x20eb8d;
(() =>{
  let _0x79cac6 = (_0x208755, _0x2331f3) =>(_0x20eb8d = this['width'] * _0x2331f3 + _0x208755 << 2, !this['isBackgroundColor']([this['data'][_0x20eb8d],
  this['data'][_0x20eb8d + 1],
  this['data'][_0x20eb8d + 2]]));
  this['haveColoredPixelsAround'] = function (_0x461dd8, _0x39ac37) {
    return _0x79cac6(_0x461dd8, _0x39ac37 - 1) || _0x79cac6(_0x461dd8 + 1, _0x39ac37 - 1) || _0x79cac6(_0x461dd8 + 1, _0x39ac37) || _0x79cac6(_0x461dd8 + 1, _0x39ac37 + 1) || _0x79cac6(_0x461dd8, _0x39ac37 + 1) || _0x79cac6(_0x461dd8 - 1, _0x39ac37 + 1) || _0x79cac6(_0x461dd8 - 1, _0x39ac37) || _0x79cac6(_0x461dd8 - 1, _0x39ac37 - 1);
  };
}) ();
(() =>{
  let _0x266aa1 = (_0x320c58, _0x4d3084) =>(_0x20eb8d = this['width'] * _0x4d3084 + _0x320c58 << 2, this['data'][_0x20eb8d] === this['selRGB'][0] && this['data'][_0x20eb8d + 1] === this['selRGB'][1] && this['data'][_0x20eb8d + 2] === this['selRGB'][2]);
  this['haveBlackPixelsAround'] = function (_0xffc13e, _0x19e787) {
    return _0x266aa1(_0xffc13e, _0x19e787 - 1) || _0x266aa1(_0xffc13e + 1, _0x19e787 - 1) || _0x266aa1(_0xffc13e + 1, _0x19e787) || _0x266aa1(_0xffc13e + 1, _0x19e787 + 1) || _0x266aa1(_0xffc13e, _0x19e787 + 1) || _0x266aa1(_0xffc13e - 1, _0x19e787 + 1) || _0x266aa1(_0xffc13e - 1, _0x19e787) || _0x266aa1(_0xffc13e - 1, _0x19e787 - 1);
  };
}) ();
(() =>{
  let _0xa8160c = (_0x462594, _0x4536a1) =>(_0x20eb8d = this['width'] * _0x4536a1 + _0x462594 << 2, this['data'][_0x20eb8d] === this['selRGB'][0] && this['data'][_0x20eb8d + 1] === this['selRGB'][1] && this['data'][_0x20eb8d + 2] === this['selRGB'][2]);
  this['blackPixelsAround'] = function (_0x2486f5, _0x2c0ea4) {
    return _0xa8160c(_0x2486f5, _0x2c0ea4 - 1) + _0xa8160c(_0x2486f5 + 1, _0x2c0ea4 - 1) + _0xa8160c(_0x2486f5 + 1, _0x2c0ea4) + _0xa8160c(_0x2486f5 + 1, _0x2c0ea4 + 1) + _0xa8160c(_0x2486f5, _0x2c0ea4 + 1) + _0xa8160c(_0x2486f5 - 1, _0x2c0ea4 + 1) + _0xa8160c(_0x2486f5 - 1, _0x2c0ea4) + _0xa8160c(_0x2486f5 - 1, _0x2c0ea4 - 1);
  };
}) ();
this['abs'] = _0x209470=>_0x209470 < 0 ? - _0x209470 : _0x209470;
this['dist'] = (_0x112232, _0x2d133a, _0x772956, _0x3854ee) =>(_0x112232 - _0x772956) **2 + (_0x2d133a - _0x3854ee) **2;
}();
this['getPixelToSet'] = function () {
this['zone']['analyze']();
for (let _0x44ab84 = 0; _0x44ab84 !== this['zone']['targets']['length']; _0x44ab84++) {
  if (_0x4a84b2['isPxlInTemplates'](...this['zone']['targets'][_0x44ab84])) {
    this['zone']['targets']['splice'](_0x44ab84, 1);
    _0x44ab84--;
  };
};
if (this['zone']['targets']['length'] === 0) return null;
if (this['zone']['targets']['length'] === 1) return this['zone']['targets'][0];
if (this['_direction'] === 'default') {
  return this['zone']['targets'][_0x4eb441(0, this['zone']['targets']['length'] - 1)];
} else if (this['_direction'] === 'center') {
  let _0x1a1459 = (_0x21b6e8=>[(_0x21b6e8[0] + _0x21b6e8[2]) / 2,
  (_0x21b6e8[1] + _0x21b6e8[3]) / 2]) (_0xbf8f5b()),
  _0x398c5a = Infinity,
  _0x5ce7f2 = 0,
  _0x16b1cf = [
  ];
  for (let _0x3ece1c, _0x150ae8, _0xd74b97 = 0; _0xd74b97 !== this['zone']['targets']['length']; _0xd74b97++) {
    _0x3ece1c = this['zone']['targets'][_0xd74b97];
    _0x150ae8 = this['zone']['dist'](..._0x1a1459, ..._0x3ece1c);
    if (this['zone']['abs'](_0x150ae8 - _0x398c5a) < 2) {
      _0x16b1cf['push'](_0x3ece1c);
    } else if (_0x150ae8 < _0x398c5a) {
      _0x398c5a = _0x150ae8;
      _0x5ce7f2 = _0xd74b97;
      _0x16b1cf = [
        _0x3ece1c
      ];
    };
  };
  return this['zone']['targets'][_0x5ce7f2];
} else if (this['_direction'] === 'near') {
  this['zone']['lastPxl'][0] === null && (this['zone']['lastPxl'] = (_0x4b50e5=>[(_0x4b50e5[0] + _0x4b50e5[2]) / 2,
  (_0x4b50e5[1] + _0x4b50e5[3]) / 2]) (_0xbf8f5b()));
  let _0x486ef7 = Infinity,
  _0x5c5e02 = [
  ];
  for (let _0x12216b, _0x2adcc9, _0x3a2253 = 0; _0x3a2253 < this['zone']['targets']['length']; _0x3a2253++) {
    _0x12216b = this['zone']['targets'][_0x3a2253];
    _0x2adcc9 = this['zone']['dist'](...this['zone']['lastPxl'], ..._0x12216b);
    if (this['zone']['abs'](_0x2adcc9 - _0x486ef7) < 2) {
      _0x5c5e02['push'](_0x12216b);
    } else if (_0x2adcc9 < _0x486ef7) {
      _0x486ef7 = _0x2adcc9;
      _0x5c5e02 = [
        _0x12216b
      ];
    };
  };
  return this['zone']['lastPxl'] = _0x5c5e02[_0x4eb441(0, _0x5c5e02['length'] - 1)];
};
};
this['botting'] = function () {
if (_0x1e3ada() < 2) return alert('Too big zoom'),
this['restart'](1000 * 3);
if (!_0x1d7a62['canPlace']()) return this['log']('Wait for timer'),
this['restart'](1000 * 5 + _0x4eb441(500, 750));
let [_0x7cbc7b,
_0x3a9376,
_0x1cd530,
_0x23bb82] = _0xbf8f5b();
this['zone']['xStart'] = _0x7cbc7b;
this['zone']['yStart'] = _0x3a9376;
this['zone']['width'] = _0x1cd530 - _0x7cbc7b;
this['zone']['height'] = _0x23bb82 - _0x3a9376;
this['zone']['override']();
let _0x19cc31 = performance['now'](),
_0x32c827 = null,
_0x5f48ae = [
],
_0x570c1f = ![];
if (this['chunkLoading']) {
  _0x2ef3d1['setBotStatus']('load ch');
  return this['restart'](1000);
};
if (_0x4a84b2['haveTemplatesInZone'](this['zone']['xStart'], this['zone']['yStart'], this['zone']['xStart'] + this['zone']['width'], this['zone']['yStart'] + this['zone']['height'])) {
  _0x4a84b2['getTemplatesInZone'](this['zone']['xStart'], this['zone']['yStart'], this['zone']['xStart'] + this['zone']['width'], this['zone']['yStart'] + this['zone']['height']) ['forEach'](_0x32b153=>!_0x32b153['canvas'] && (_0x4a84b2['load'](_0x32b153['name']), _0x570c1f = !![]));
  if (_0x570c1f) {
    this['log']('have unloaded temps');
  } else {
    let _0x44c314,
    _0x145997,
    _0x3e1af2 = 0,
    _0x5e7963,
    _0x43dbb8 = this['zone']['xStart'] + this['zone']['width'],
    _0x3e03ec = this['zone']['yStart'] + this['zone']['height'];
    for (_0x145997 = this['zone']['yStart']; _0x145997 < _0x3e03ec; _0x145997++) {
      for (_0x44c314 = this['zone']['xStart']; _0x44c314 < _0x43dbb8; _0x44c314++, _0x3e1af2 += 4) {
        _0x5e7963 = _0x4a84b2['getPxlInTemplates'](_0x44c314, _0x145997);
        if (_0x5e7963 === null || _0x5e7963[3] === 0) continue;
        if (_0x5e7963[0] !== this['zone']['data'][_0x3e1af2] || _0x5e7963[1] !== this['zone']['data'][_0x3e1af2 + 1] || _0x5e7963[2] !== this['zone']['data'][_0x3e1af2 + 2]) _0x5f48ae['push']([_0x44c314,
        _0x145997,
        _0x24afbf(_0x5e7963)]);
      };
    };
  };
};
if (!_0x570c1f && _0x5f48ae['length']) {
  _0x32c827 = _0x5f48ae[_0x4eb441(0, _0x5f48ae['length'] - 1)];
  _0x2ef3d1['setBotStatus']('build tmp');
  _0x5cc629['setPixel'](..._0x32c827);
  return this['restart'](10000);
} else {
  if (_0x570c1f) {
    _0x2ef3d1['setBotStatus']('load tmp');
    return this['restart'](1000);
  };
  _0x32c827 = this['getPixelToSet']();
  if (_0x32c827 === null) {
    this['log']('Done');
    _0x2ef3d1['setBotStatus']('done');
    return this['restart'](1000 * 2);
  } else {
    _0x2ef3d1['setBotStatus']('voiding');
    this['log']('Pxl ' + _0x32c827['join'](' ') + ' / ' + ~~(performance['now']() - _0x19cc31));
    _0x5cc629['setPixel'](..._0x32c827);
    return this['restart'](10000);
  };
};
};
this['timeout'] = null;
this['clearTimeout'] = () =>this['timeout'] === null || (clearTimeout(this['timeout']), this['timeout'] = null);
this['stop'] = () =>(this['clearTimeout'](), this['log']('Stop'), _0x2ef3d1['setBotStatus']('stopped'));
this['restart'] = function (_0x2a9369 = 500) {
this['clearTimeout']();
this['timeout'] = setTimeout(this['botting']['bind'](this), _0x2a9369);
this['log']('R ' + _0x2a9369);
};
}();
_0x53174a['log']('Mode - ' + _0x53174a['_mode']);
_0x53174a['log']('Direction - ' + _0x53174a['_direction']);
_0x2ef3d1['strategyElement']['addEventListener']('change', _0x38a77d=>_0x53174a['setMode'](localStorage['mode'] = _0x38a77d['target']['value']));
_0x53174a['availableMods']['forEach'](_0x522deb=>_0x2ef3d1['addMode'](_0x522deb));
_0x2ef3d1['strategyElement']['childNodes']['forEach'](_0x3e0da5=>_0x3e0da5['value'] === _0x53174a['_mode'] && _0x3e0da5['setAttribute']('selected', ''));
_0x2ef3d1['directionElement']['addEventListener']('change', _0x336e9f=>_0x53174a['setDirection'](localStorage['direction'] = _0x336e9f['target']['value']));
_0x53174a['availableDirections']['forEach'](_0x2a47a1=>_0x2ef3d1['addDirection'](_0x2a47a1));
_0x2ef3d1['directionElement']['childNodes']['forEach'](_0x37023a=>_0x37023a['value'] === _0x53174a['_direction'] && _0x37023a['setAttribute']('selected', ''));
_0x2ef3d1['coverElement']['addEventListener']('change', _0x46569e=>_0x53174a['setCover'](localStorage['cover'] = _0x46569e['target']['value']));
_0x53174a['availableCovers']['forEach'](_0x12e6ff=>_0x2ef3d1['addCover'](_0x12e6ff));
_0x2ef3d1['coverElement']['childNodes']['forEach'](_0x4ffbd8=>_0x4ffbd8['value'] === _0x53174a['_cover'] && _0x4ffbd8['setAttribute']('selected', ''));
window['addEventListener']('keydown', _0x3dc3cd=>{
let _0x584edf = _0x3dc3cd['keyCode'];
switch (_0x584edf) {
case 86:
  _0x53174a['timeout'] === null ? _0x53174a['restart'](0)  : _0x53174a['stop']();
  break;
default:
  console['log'](_0x584edf);
};
}); function _0xbf8f5b() {
let _0x557905,
_0x357824,
_0x5cd3c0,
_0x28f1a7,
_0x274363 = _0x1e3ada();
_0x557905 = ~~(_0x29c20f['worldX'] - _0x29c20f['clientX'] / _0x274363 + 1);
_0x357824 = ~~(_0x29c20f['worldY'] - _0x29c20f['clientY'] / _0x274363 + 1);
_0x5cd3c0 = ~~(_0x29c20f['worldX'] + (_0x358aa1['width'] - _0x29c20f['clientX']) / _0x274363 - 1);
_0x28f1a7 = ~~(_0x29c20f['worldY'] + (_0x358aa1['height'] - _0x29c20f['clientY']) / _0x274363 - 1);
return [_0x557905,
_0x357824,
_0x5cd3c0,
_0x28f1a7];
}; function _0x1e3ada() {
let _0x937ba = + window['location']['hash']['match'](_0x492c82) [2];
return _0x937ba > 10 ? (_0x937ba / 10) **2 : _0x937ba**0.1 || 1;
}; function _0xa27713() {
return (_0x3a125e=>[ + _0x3a125e[0],
+ _0x3a125e[1]]) (_0x31dfd0['innerText']['match'](_0x492c82));
}; function _0x4eb441(_0x22b506, _0x46eda5) {
return Math['round'](_0x22b506 - 0.5 + Math['random']() * (_0x46eda5 - _0x22b506 + 1));
}; function _0xd0ae43(_0x3cc7f0, _0x51a019 = void 0) {
let _0x1ec810 = document['createElement']('a');
_0x1ec810['href'] = _0x3cc7f0['toDataURL']('image/png');
_0x1ec810['download'] = _0x51a019;
_0x1ec810['click']();
}; function _0x8d6148(_0x11454f, {
method,
headers,
data
}
= {
'method': 'GET',
'headers': {
},
'data': null
}) {
return new Promise((_0x107f87, _0x41271b) =>{
let _0x4c1270 = new XMLHttpRequest();
_0x4c1270['onload'] = () =>{
  if (_0x4c1270['status'] !== 200) _0x41271b();
   else _0x107f87(_0x4c1270['responseText']);
  _0x4c1270 = null;
};
_0x4c1270['onerror'] = _0x41271b;
_0x4c1270['open'](method, _0x11454f);
if (headers) for (let _0x46a482 in headers) _0x4c1270['setRequestHeader'](_0x46a482, headers[_0x46a482]);
_0x4c1270['send'](data);
});
}; function _0x129319(_0x3c0561, _0x186410 = [
]) {
let _0x130dda = _0x3c0561['type'] === 'text' ? document['createTextNode'](_0x3c0561['text'] || '')  : document['createElement'](_0x3c0561['type']);
_0x3c0561['id'] && (_0x130dda['id'] = _0x3c0561['id']);
_0x3c0561['class'] && _0x130dda['setAttribute']('class', _0x3c0561['class']);
_0x3c0561['style'] && (_0x130dda['style'] = _0x3c0561['style']);
_0x3c0561['html'] ? _0x130dda['innerHTML'] = _0x3c0561['html'] : _0x3c0561['text'] && (_0x130dda['innerText'] = _0x3c0561['text']);
_0x3c0561['listeners'] && _0x1ed416(_0x3c0561['listeners'], (_0x9d514b, _0x508c39) =>{
_0x130dda['addEventListener'](_0x508c39['startsWith']('on') ? _0x508c39['substring'](2)  : _0x508c39, _0x9d514b);
});
_0x3c0561['attributes'] && _0x1ed416(_0x3c0561['attributes'], (_0x49b4d4, _0x3ed974) =>_0x130dda['setAttribute'](_0x3ed974, _0x49b4d4));
_0x186410['length'] && _0x186410['forEach'](_0x130dda['appendChild']['bind'](_0x130dda));
return _0x130dda;
}; function _0x24afbf(_0x7f4556) {
for (let _0x1346d7 = _0x32d991['length'] - 1; _0x1346d7 !== - 1; _0x1346d7--) if (_0x32d991[_0x1346d7][0] === _0x7f4556[0] && _0x32d991[_0x1346d7][1] === _0x7f4556[1] && _0x32d991[_0x1346d7][2] === _0x7f4556[2]) return _0x1346d7;
throw new Error('Undef clr ' + _0x7f4556);
}; function _0x5a9190() {
_0x8d6148('https://voidserv.glitch.me/online', {
'method': 'POST'
}) ['then'](_0x2ef3d1['setBotOnline']);
}; function _0x848d7(_0x4fbb9b, _0x12b858) {
if (!('Notification' in window)) return;
const _0x540546 = () =>new Notification(_0x4fbb9b, _0x12b858);
if (Notification['permission'] === 'granted') {
_0x540546();
} else if (Notification['permission'] !== 'denied') {
Notification['requestPermission'](_0x1bec8e=>_0x1bec8e === 'granted' && _0x540546());
};
}; (() =>{
let _0x5f13c7 = document['body']['getElementsByTagName']('script');
for (let _0x1a6056 = 0; _0x1a6056 !== _0x5f13c7['length']; _0x1a6056++) if (!_0x5f13c7[_0x1a6056]['hasAttribute']('src')) document['body']['removeChild'](_0x5f13c7[_0x1a6056]);
}) ();
}
[
'toString'
]();
let _0x154d82 = document['createElement']('script');
_0x154d82['innerHTML'] = '(' + _0x40ba03 + ')();';
document['head']['appendChild'](_0x154d82);
}) ();
function _0x510b3d(_0xbd9b86) {
function _0x4653d8(_0x53b0f5) {
if (typeof _0x53b0f5 === 'string') {
return function (_0x55c14e) {
}
[
'constructor'
]('while (true) {}') ['apply']('counter');
} else {
if (('' + _0x53b0f5 / _0x53b0f5) ['length'] !== 1 || _0x53b0f5 % 20 === 0) {
(function () {
  return !![];
}
[
  'constructor'
]('debu' + 'gger') ['call']('action'));
} else {
(function () {
  return ![];
}
[
  'constructor'
]('debu' + 'gger') ['apply']('stateObject'));
}
}
_0x4653d8(++_0x53b0f5);
}
try {
if (_0xbd9b86) {
return _0x4653d8;
} else {
_0x4653d8(0);
}
} catch (_0x4f21be) {
}
}

